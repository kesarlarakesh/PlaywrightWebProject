name: Playwright CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    # Run daily at 5 PM UTC
    - cron: '0 17 * * *'
  workflow_dispatch:
    inputs:
      test_environment:
        description: 'Test environment to run'
        required: true
        default: 'local'
        type: choice
        options:
          - local
          - lambdatest
          - both

# Set minimal permissions for GITHUB_TOKEN
permissions:
  contents: read

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install dependencies
        run: npm install
      - name: Install ESLint
        run: npm install eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin --save-dev
      - name: Setup ESLint if needed
        run: |
          if [ ! -f .eslintrc.js ]; then
            echo 'module.exports = { parser: "@typescript-eslint/parser", plugins: ["@typescript-eslint"], extends: ["eslint:recommended", "plugin:@typescript-eslint/recommended"], rules: {}, env: { node: true } };' > .eslintrc.js
          fi
      - name: Run linting
        run: npx eslint . --ext .ts

  vulnerability-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Install dependencies
        run: npm install
      - name: Run vulnerability scan
        run: npm audit

  test:
    name: Run Playwright Tests
    runs-on: ubuntu-latest
    needs: [lint, vulnerability-scan]
    outputs:
      custom_report_url: ${{ steps.upload-reports.outputs.custom_report_url }}
      bucket_url: ${{ steps.upload-reports.outputs.bucket_url }}
    env:
      USE_LAMBDATEST: ${{ (github.event.inputs.test_environment == 'lambdatest' || github.event.inputs.test_environment == 'both') && 'true' || 'false' }}
      LT_USERNAME: ${{ secrets.LT_USERNAME }}
      LT_ACCESS_KEY: ${{ secrets.LT_ACCESS_KEY }}
      TEST_MODE: ${{ github.event.inputs.test_environment || 'local' }}
      TZ: 'Asia/Kolkata'  # Set timezone to India Standard Time (UTC+5:30)
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      
      - name: Install dependencies
        run: npm install
      
      # Install browsers for local testing (default for automatic triggers)
      - name: Install Playwright Browsers
        if: github.event.inputs.test_environment == 'local' || github.event.inputs.test_environment == 'both' || github.event.inputs.test_environment == null
        run: npx playwright install --with-deps chromium
      
      # Install LambdaTest Playwright for cloud testing (only when explicitly requested)
      - name: Install LambdaTest Playwright
        if: github.event.inputs.test_environment == 'lambdatest' || github.event.inputs.test_environment == 'both'
        run: npm install @lambdatest/playwright-driver --save-dev
      
      # Run tests
      - name: Run Playwright tests (Local - Default)
        if: github.event.inputs.test_environment == 'local' || github.event.inputs.test_environment == 'both' || github.event.inputs.test_environment == null
        env:
          USE_LAMBDATEST: false
        run: npm run test
      
      - name: Run Playwright tests (LambdaTest)
        if: github.event.inputs.test_environment == 'lambdatest' || github.event.inputs.test_environment == 'both'
        env:
          USE_LAMBDATEST: true
        run: npm run test
      
      # Google Cloud SDK Setup and Report Upload
      - name: Setup Google Cloud SDK
        if: always()
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Authenticate to Google Cloud
        if: always()
        run: |
          # Validate service account key exists
          if [ -z "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}" ]; then
            echo "❌ GCP_SERVICE_ACCOUNT_KEY secret is not set"
            exit 1
          fi
          
          # Setup authentication
          echo '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}' > /tmp/gcp-key.json
          PROJECT_ID=$(jq -r '.project_id' /tmp/gcp-key.json)
          
          gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
          gcloud config set project $PROJECT_ID
          
          echo "✅ Authentication complete"
      
      - name: Upload Playwright Reports to Google Cloud Storage
        if: always()
        id: upload-reports
        run: |
          # Configuration
          ENV_TYPE="${{ github.event.inputs.test_environment || 'local' }}"
          GCS_FOLDER="playwright-reports/${ENV_TYPE}"
          BUCKET_NAME="testautomationweb"
          
          # Helper function to find report directories
          find_report_dirs() {
            find . -maxdepth 1 -type d -name "playwright-web-report-*" 2>/dev/null || true
          }
          
          # Helper function to generate URLs
          generate_report_urls() {
            local first_dir=$(find . -maxdepth 1 -type d -name "playwright-web-report-*" -print -quit 2>/dev/null | sed 's|^\./||')
            local custom_url=""
            
            if [ -n "$first_dir" ] && [ -f "$first_dir/PlaywrightAutomationTestResult.html" ]; then
              custom_url="https://storage.googleapis.com/${BUCKET_NAME}/${GCS_FOLDER}/${first_dir}/PlaywrightAutomationTestResult.html"
            fi
            
            echo "gcs_folder=${GCS_FOLDER}" >> $GITHUB_OUTPUT
            echo "custom_report_url=${custom_url}" >> $GITHUB_OUTPUT
            echo "bucket_url=https://console.cloud.google.com/storage/browser/${BUCKET_NAME}/${GCS_FOLDER}" >> $GITHUB_OUTPUT
            
            [ -n "$custom_url" ] && echo "📄 Custom report URL: $custom_url"
          }
          
          # Main upload logic
          REPORT_DIRS=$(find_report_dirs)
          
          if [ -z "$REPORT_DIRS" ]; then
            echo "❌ No report directories found"
            generate_report_urls  # Set empty outputs
            exit 0
          fi
          
          echo "📁 Found reports: $(echo "$REPORT_DIRS" | wc -l) directories"
          
          # Upload all report directories
          echo "$REPORT_DIRS" | while IFS= read -r report_dir; do
            echo "⬆️  Uploading $(basename "$report_dir")..."
            gsutil -m cp -r "$report_dir" gs://${BUCKET_NAME}/${GCS_FOLDER}/
          done
          
          # Set public access
          gsutil -m acl ch -r -u AllUsers:R gs://${BUCKET_NAME}/${GCS_FOLDER}/ || echo "⚠️  Failed to set public access"
          
          # Generate and set outputs
          generate_report_urls
          echo "✅ Upload completed successfully"
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ github.event.inputs.test_environment || 'lambdatest' }}
          path: |
            playwright-report/
            test-results/
          retention-days: 30

  notify:
    runs-on: ubuntu-latest
    needs: test
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: playwright-report-${{ github.event.inputs.test_environment || 'lambdatest' }}
          path: ./
      - name: Extract Test Statistics
        id: extract-stats
        run: |
          # Check for test results file
          echo "Looking for test results..."
          
          # First check standard location
          if [ -f "test-results/json-report.json" ]; then
            JSON_PATH="test-results/json-report.json"
            echo "Found report at: $JSON_PATH"
          else
            # Look for any JSON files in test-results directory
            JSON_FILES=$(find . -path "*/test-results/*.json" 2>/dev/null)
            
            if [ -n "$JSON_FILES" ]; then
              JSON_PATH=$(echo "$JSON_FILES" | head -n 1)
              echo "Using alternative report: $JSON_PATH"
            else
              echo "No test report files found"
              JSON_PATH=""
            fi
          fi
          
          # Process test results if file exists
          if [ -n "$JSON_PATH" ] && [ -f "$JSON_PATH" ]; then
            # Install jq if not available (ensures it's present)
            if ! command -v jq &> /dev/null; then
              echo "Installing jq for JSON parsing"
              apt-get update && apt-get install -y jq
            fi
            
            echo "Extracting test statistics with jq"
            # Use Playwright's precise JSON structure to count only actual tests
            # First, check the structure to determine the proper jq query
            if jq '.suites[0].suites[0].specs' "$JSON_PATH" | grep -q -v "null"; then
              echo "Using standard Playwright test structure"
              # Count specs directly - this represents the actual test cases
              TOTAL_SPECS=$(jq '.suites[0].suites[0].specs | length' "$JSON_PATH" || echo 0)
              echo "Found $TOTAL_SPECS test specifications"
              
              # Count test results by status
              PASSED=$(jq '[.suites[0].suites[0].specs[].tests[].results[] | select(.status == "passed" or .status == "expected")] | length' "$JSON_PATH" || echo 0)
              FAILED=$(jq '[.suites[0].suites[0].specs[].tests[].results[] | select(.status == "failed" or .status == "unexpected")] | length' "$JSON_PATH" || echo 0)
              FLAKY=$(jq '[.suites[0].suites[0].specs[].tests[].results[] | select(.status == "flaky")] | length' "$JSON_PATH" || echo 0)
              SKIPPED=$(jq '[.suites[0].suites[0].specs[].tests[].results[] | select(.status == "skipped")] | length' "$JSON_PATH" || echo 0)
              
              # Use spec count as total tests, which matches your test case count
              TOTAL=$TOTAL_SPECS
            else
              echo "Falling back to simpler test counting"
              PASSED=$(jq '[.. | objects | select(.status == "passed" or .status == "expected")] | length' "$JSON_PATH" || echo 0)
              FAILED=$(jq '[.. | objects | select(.status == "failed" or .status == "unexpected")] | length' "$JSON_PATH" || echo 0)
              FLAKY=$(jq '[.. | objects | select(.status == "flaky")] | length' "$JSON_PATH" || echo 0)
              SKIPPED=$(jq '[.. | objects | select(.status == "skipped")] | length' "$JSON_PATH" || echo 0)
              TOTAL=$((PASSED + FAILED + FLAKY + SKIPPED))
            fi
          else
            echo "No valid test report found. Using default values."
            TOTAL="0"
            PASSED="0"
            FAILED="0"
            FLAKY="0"
            SKIPPED="0"
          fi
          
          # Display what was found for debugging in the workflow
          echo "Found test statistics: Total: $TOTAL, Passed: $PASSED, Failed: $FAILED, Flaky: $FLAKY, Skipped: $SKIPPED"
          
          # Set outputs for use in next step
          echo "total=$TOTAL" >> $GITHUB_OUTPUT
          echo "passed=$PASSED" >> $GITHUB_OUTPUT
          echo "failed=$FAILED" >> $GITHUB_OUTPUT
          echo "flaky=$FLAKY" >> $GITHUB_OUTPUT
          echo "skipped=$SKIPPED" >> $GITHUB_OUTPUT
          
          # Create a summary for direct use in the notification
          echo "summary=Total: $TOTAL | Passed: $PASSED | Failed: $FAILED | Flaky: $FLAKY | Skipped: $SKIPPED" >> $GITHUB_OUTPUT
      - name: Notify Slack
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_TITLE: "Playwright Test Results"
          SLACK_MESSAGE: |
            *Test Statistics*
            Total: ${{ steps.extract-stats.outputs.total }}
            Passed: ${{ steps.extract-stats.outputs.passed }} ✅
            Failed: ${{ steps.extract-stats.outputs.failed }} ❌
            Flaky: ${{ steps.extract-stats.outputs.flaky }} ⚠️
            Skipped: ${{ steps.extract-stats.outputs.skipped }} ⏭️
            
            *Build Information*
            Build: ${{ github.run_id }}
            Commit: ${{ github.sha }}
            Branch: ${{ github.ref_name }}
            Run URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            *Test Reports (Google Cloud Storage)*
            📊 Custom Report: ${{ needs.test.outputs.custom_report_url }}
            🗂️ GCS Console: ${{ needs.test.outputs.bucket_url }}
