name: Playwright CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    # Run daily at 5 PM UTC
    - cron: '0 17 * * *'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install dependencies
        run: npm install
      - name: Install ESLint
        run: npm install eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin --save-dev
      - name: Setup ESLint if needed
        run: |
          if [ ! -f .eslintrc.js ]; then
            echo 'module.exports = { parser: "@typescript-eslint/parser", plugins: ["@typescript-eslint"], extends: ["eslint:recommended", "plugin:@typescript-eslint/recommended"], rules: {}, env: { node: true } };' > .eslintrc.js
          fi
      - name: Run linting
        run: npx eslint . --ext .ts

  vulnerability-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Install dependencies
        run: npm install
      - name: Run vulnerability scan
        run: npm audit

  test:
    name: Run Playwright Tests
    runs-on: ubuntu-latest
    needs: [lint, vulnerability-scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Install dependencies
        run: npm install
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps chromium
      - name: Run Playwright tests with Allure reporting
        run: npm run test:allure
      - name: Generate Allure report
        run: |
          npm run allure:import
          npm run allure:generate
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: |
            playwright-report/
            allure-report/
            test-results/
            allure-results/
          retention-days: 30

  notify:
    runs-on: ubuntu-latest
    needs: test
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: playwright-report
          path: ./
      - name: Extract Test Statistics
        id: extract-stats
        run: |
          # Check if test-results/json-report.json exists
          if [ -f "test-results/json-report.json" ]; then
            echo "Found test-results/json-report.json file"
            # Extract test statistics using jq if available
            if command -v jq &> /dev/null; then
              echo "Using jq to parse JSON"
              # Playwright JSON report format is different from what we expected before
              TOTAL=$(jq '.suites[0].specs | length' test-results/json-report.json)
              PASSED=$(jq '[.suites[0].specs[].tests[] | select(.status == "passed")] | length' test-results/json-report.json)
              FAILED=$(jq '[.suites[0].specs[].tests[] | select(.status == "failed")] | length' test-results/json-report.json)
              FLAKY=$(jq '[.suites[0].specs[].tests[] | select(.status == "flaky")] | length' test-results/json-report.json)
              SKIPPED=$(jq '[.suites[0].specs[].tests[] | select(.status == "skipped")] | length' test-results/json-report.json)
            else
              echo "jq not available, using grep/awk fallback"
              # This is a rough approximation since parsing JSON with grep is not ideal
              PASSED=$(grep -c '"status":"passed"' test-results/json-report.json || echo 0)
              FAILED=$(grep -c '"status":"failed"' test-results/json-report.json || echo 0)
              FLAKY=$(grep -c '"status":"flaky"' test-results/json-report.json || echo 0)
              SKIPPED=$(grep -c '"status":"skipped"' test-results/json-report.json || echo 0)
              TOTAL=$((PASSED + FAILED + FLAKY + SKIPPED))
            fi
          else
            # Try allure-results directory since that's where Allure data is stored
            echo "JSON report not found in test-results directory, checking allure-results"
            
            if [ -d "allure-results" ]; then
              echo "Found allure-results directory, trying to extract test counts"
              # Count test cases in allure-results by status
              TOTAL=$(find allure-results -name "*.json" | grep -v "container\|attachment" | wc -l)
              PASSED=$(grep -l '"status":"passed"' allure-results/*.json 2>/dev/null | wc -l)
              FAILED=$(grep -l '"status":"failed"' allure-results/*.json 2>/dev/null | wc -l)
              SKIPPED=$(grep -l '"status":"skipped"' allure-results/*.json 2>/dev/null | wc -l)
              FLAKY=0  # Allure doesn't have a direct flaky status
            else
              echo "No test result data found"
              # Default values if no results exist
              TOTAL="0"
              PASSED="0"
              FAILED="0"
              FLAKY="0"
              SKIPPED="0"
            fi
          fi
          
          # Display what was found for debugging in the workflow
          echo "Found test statistics: Total: $TOTAL, Passed: $PASSED, Failed: $FAILED, Flaky: $FLAKY, Skipped: $SKIPPED"
          
          # Set outputs for use in next step
          echo "total=$TOTAL" >> $GITHUB_OUTPUT
          echo "passed=$PASSED" >> $GITHUB_OUTPUT
          echo "failed=$FAILED" >> $GITHUB_OUTPUT
          echo "flaky=$FLAKY" >> $GITHUB_OUTPUT
          echo "skipped=$SKIPPED" >> $GITHUB_OUTPUT
          
          # Create a summary for direct use in the notification
          echo "summary=Total: $TOTAL | Passed: $PASSED | Failed: $FAILED | Flaky: $FLAKY | Skipped: $SKIPPED" >> $GITHUB_OUTPUT
      - name: Notify Slack
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.WEBHOOK_URL }}
          SLACK_TITLE: "Playwright Test Results"
          SLACK_MESSAGE: |
            *Test Statistics*
            Total: ${{ steps.extract-stats.outputs.total }}
            Passed: ${{ steps.extract-stats.outputs.passed }} ✅
            Failed: ${{ steps.extract-stats.outputs.failed }} ❌
            Flaky: ${{ steps.extract-stats.outputs.flaky }} ⚠️
            Skipped: ${{ steps.extract-stats.outputs.skipped }} ⏭️
            
            *Build Information*
            Build: ${{ github.run_id }}
            Commit: ${{ github.sha }}
            Branch: ${{ github.ref_name }}
            Run URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
